#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

int n, m = 0;
char a[10][10], f[10];

void follow(char c);
void first(char c);

int main() {
    int i, z;
    char c, ch;
    
    printf("Enter the number of productions: ");
    scanf("%d", &n);
    
    printf("Enter the productions (e.g., E=E+T):\n");
    for (i = 0; i < n; i++)
        scanf("%s", a[i]);

    do {
        m = 0;
        printf("Enter the element whose First & Follow is to be found: ");
        scanf(" %c", &c);  // Adding space before %c to consume newline
        
        first(c);
        printf("First(%c) = { ", c);
        for (i = 0; i < m; i++) {
            printf("%c ", f[i]);
        }
        printf("}\n");
        
        memset(f, 0, sizeof(f));  // Clear the f array
        m = 0;
        
        follow(c);
        printf("Follow(%c) = { ", c);
        for (i = 0; i < m; i++) {
            printf("%c ", f[i]);
        }
        printf("}\n");
        
        printf("Continue? (0 = No, 1 = Yes): ");
        scanf("%d", &z);
        
    } while (z == 1);
    
    return 0;
}

void first(char c) {
    int k;
    if (!isupper(c)) {  // If terminal, add to First set
        f[m++] = c;
        return;
    }

    for (k = 0; k < n; k++) {
        if (a[k][0] == c) {
            if (a[k][2] == '$') {  // If epsilon, add Follow of the non-terminal
                follow(a[k][0]);
            } else if (islower(a[k][2])) {  // If terminal, add directly
                f[m++] = a[k][2];
            } else {  // If non-terminal, recurse
                first(a[k][2]);
            }
        }
    }
}

void follow(char c) {
    if (a[0][0] == c) {  // If start symbol, add $
        f[m++] = '$';
    }

    for (int i = 0; i < n; i++) {
        for (int j = 2; j < strlen(a[i]); j++) {
            if (a[i][j] == c) {
                if (a[i][j + 1] != '\0') {  // If not last symbol, add First of next symbol
                    first(a[i][j + 1]);
                }
                if (a[i][j + 1] == '\0' && c != a[i][0]) {  // If last symbol, add Follow of LHS
                    follow(a[i][0]);
                }
            }
        }
    }
}
